{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\admin\\controller\\login.js"
    ],
    "names": [
        "_thinkSvgCaptcha",
        "require",
        "_thinkSvgCaptcha2",
        "_interopRequireDefault",
        "obj",
        "__esModule",
        "default",
        "_asyncToGenerator",
        "fn",
        "gen",
        "apply",
        "arguments",
        "Promise",
        "resolve",
        "reject",
        "step",
        "key",
        "arg",
        "info",
        "value",
        "error",
        "done",
        "then",
        "err",
        "module",
        "exports",
        "think",
        "Controller",
        "indexAction",
        "display",
        "captchaAction",
        "options",
        "size",
        "ignoreChars",
        "noise",
        "color",
        "background",
        "width",
        "height",
        "fontSize",
        "charPreset",
        "captcha",
        "c",
        "create",
        "success",
        "dologinAction",
        "_this",
        "isPost",
        "username",
        "post",
        "password",
        "data",
        "model",
        "where",
        "admin_name",
        "admin_pass",
        "find",
        "isEmpty",
        "fail",
        "session",
        "logoutAction",
        "_this2",
        "redirect"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\admin\\controller\\login.js",
    "sourcesContent": [
        "var _thinkSvgCaptcha = require('think-svg-captcha');\n\nvar _thinkSvgCaptcha2 = _interopRequireDefault(_thinkSvgCaptcha);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _asyncToGenerator(fn) {\n    return function () {\n        var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {\n            function step(key, arg) {\n                try {\n                    var info = gen[key](arg);var value = info.value;\n                } catch (error) {\n                    reject(error);return;\n                }if (info.done) {\n                    resolve(value);\n                } else {\n                    return Promise.resolve(value).then(function (value) {\n                        step(\"next\", value);\n                    }, function (err) {\n                        step(\"throw\", err);\n                    });\n                }\n            }return step(\"next\");\n        });\n    };\n}\n\nmodule.exports = class extends think.Controller {\n    indexAction() {\n        return this.display();\n    }\n    /*\r\n    * 验证码\r\n    * */\n    captchaAction() {\n        const options = {\n            size: 4, // size of random string\n            ignoreChars: '', // filter out some characters\n            noise: 1, // number of noise lines\n            color: false, // default grey, true if background option is set\n            background: '#ffffff', // background color of the svg image\n            width: 80, // width of captcha\n            height: 35, // height of captcha\n            //fontPath: './fonts/Comismsh.ttf', // your font path\n            fontSize: 50, // captcha text size\n            charPreset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789' // random character preset\n        };\n        let captcha = new _thinkSvgCaptcha2.default(options);\n        let c = captcha.create(); // returns an object that has the following property: {data: 'svg path data', text: 'captcha text'}\n        this.success({ captcha: c }, '获取验证码成功');\n    }\n\n    /*\r\n    * 登陆\r\n    * */\n    dologinAction() {\n        var _this = this;\n\n        return _asyncToGenerator(function* () {\n            if (_this.isPost) {\n                let username = _this.post('username'); //获取用户名\n                let password = _this.post('password'); //获取密码\n                let data = yield _this.model('admin').where({ admin_name: username, admin_pass: password }).find(); //查询数据库\n                if (think.isEmpty(data)) {\n                    return _this.fail(403, '账号密码错误！请重新填写'); //登陆失败\n                } else {\n                    _this.session('userinfo', data);\n                    _this.success({ username: username }, '登陆成功');\n                }\n            }\n        })();\n    }\n    /**\r\n     * 注销\r\n     */\n    logoutAction() {\n        var _this2 = this;\n\n        return _asyncToGenerator(function* () {\n            yield _this2.session(null);\n            _this2.redirect('/index/index'); //登录成功将用户信息写入session，返回到user首页。\n        })();\n    }\n};"
    ]
}