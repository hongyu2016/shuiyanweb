{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\admin\\controller\\slideshow.js"
    ],
    "names": [
        "pagination",
        "require",
        "fs",
        "path",
        "helper",
        "Base",
        "Jimp",
        "module",
        "exports",
        "constructor",
        "args",
        "modelInstance",
        "model",
        "indexAction",
        "pageIndex",
        "get",
        "data",
        "slideList",
        "page_data",
        "ctx",
        "desc",
        "pageNum",
        "url",
        "class",
        "text",
        "next",
        "prev",
        "total",
        "assign",
        "display",
        "addAction",
        "slideId",
        "slideData",
        "where",
        "find",
        "uploadImgAction",
        "file",
        "type",
        "filepath",
        "nameArr",
        "name",
        "split",
        "basename",
        "length",
        "YYYYMMDD",
        "datetime",
        "Date",
        "now",
        "staticPath",
        "resolve",
        "think",
        "ROOT_PATH",
        "uploadSlidePath",
        "uploadPath",
        "relativePath",
        "existsSync",
        "mkdirSync",
        "renameSync",
        "datuPath",
        "read",
        "then",
        "lenna",
        "cover",
        "quality",
        "autocrop",
        "write",
        "catch",
        "err",
        "console",
        "error",
        "json",
        "success",
        "errmsg",
        "img_path",
        "img_path_thumb",
        "title",
        "original",
        "addslideAction",
        "isGet",
        "param",
        "editId",
        "descrition",
        "jumpUrl",
        "is_slide",
        "isslide",
        "reg",
        "fail",
        "test",
        "slide_title",
        "slide_img",
        "slide_text",
        "slide_jumpurl",
        "slide_thumb",
        "field",
        "filePath",
        "unlinkSync",
        "editSlide",
        "isSlide",
        "count",
        "addSlide",
        "deleteAction",
        "i",
        "hasOwnProperty",
        "dataId",
        "delete",
        "setslideAction",
        "id",
        "thisRecord",
        "update"
    ],
    "mappings": ";;AAAA,MAAMA,aAAaC,QAAQ,kBAAR,CAAnB;AACA,MAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,SAASH,QAAQ,cAAR,CAAf;AACA,MAAMI,OAAOJ,QAAQ,WAAR,CAAb;AACA,MAAMK,OAAOL,QAAQ,MAAR,CAAb;AACAM,OAAOC,OAAP,GAAiB,cAAcH,IAAd,CAAmB;AAChC;;;AAGAI,gBAAY,GAAGC,IAAf,EAAqB;AACjB,cAAM,GAAGA,IAAT,EADiB,CACF;AACf,aAAKC,aAAL,GAAqB,KAAKC,KAAL,CAAW,WAAX,CAArB,CAFiB,CAE6B;AACjD;AACH;AACMC,eAAN,GAAoB;AAAA;;AAAA;AAChB;AACA,gBAAIC,YAAU,MAAKC,GAAL,CAAS,MAAT,CAAd;AACA,kBAAMC,OAAO,MAAM,MAAKL,aAAL,CAAmBM,SAAnB,CAA6BH,SAA7B,CAAnB,CAHgB,CAG8C;AAC9D,kBAAMI,YAAYlB,WAAWgB,IAAX,EAAiB,MAAKG,GAAtB,EAA2B;AACzCC,sBAAM,KADmC,EAC5B;AACbC,yBAAS,CAFgC;AAGzCC,qBAAK,EAHoC,EAGhC;AACTC,uBAAO,EAJkC,EAI9B;AACXC,sBAAM;AACFC,0BAAM,KADJ;AAEFC,0BAAM,KAFJ;AAGFC,2BAAO;AAHL;AALmC,aAA3B,CAAlB;AAWA,kBAAKC,MAAL,CAAY,EAAC,cAAaV,SAAd,EAAwB,cAAaF,KAAKA,IAA1C,EAAZ;AACA,mBAAO,MAAKa,OAAL,EAAP;AAhBgB;AAiBnB;AACD;;;AAGQC,aAAN,GAAiB;AAAA;;AAAA;AACb,gBAAIC,UAAQ,OAAKhB,GAAL,CAAS,UAAT,CAAZ;AACA,gBAAGgB,OAAH,EAAW;AAAC;AACR,oBAAIC,YAAU,MAAM,OAAKrB,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAWF,OAAZ,EAAzB,EAA+CG,IAA/C,EAApB;AACA,uBAAKN,MAAL,CAAY,WAAZ,EAAwBI,SAAxB;AACH;;AAED,mBAAO,OAAKH,OAAL,EAAP;AAPa;AAQhB;AACD;;;AAGMM,mBAAN,GAAuB;AAAA;;AAAA;AACnB,gBAAIC,OAAK,OAAKjB,GAAL,CAASiB,IAAT,CAAc,MAAd,CAAT,CADmB,CACY;;AAE/B,gBAAGA,QAAQA,KAAKC,IAAL,KAAc,WAAtB,IAAqCD,KAAKC,IAAL,KAAc,YAAtD,EAAoE;AAChE,sBAAMC,WAAWF,KAAKjC,IAAtB;AACA,sBAAMoC,UAAUH,KAAKI,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAhB;AACA,sBAAMC,WAAWvC,KAAKuC,QAAL,CAAcJ,QAAd,IAA0B,GAA1B,GAAgCC,QAAQA,QAAQI,MAAR,GAAiB,CAAzB,CAAjD;AACA,sBAAMC,WAAWxC,OAAOyC,QAAP,CAAgBC,KAAKC,GAAL,EAAhB,EAA4B,UAA5B,CAAjB;AACA,sBAAMC,aAAa7C,KAAK8C,OAAL,CAAaC,MAAMC,SAAnB,EAA8B,YAA9B,CAAnB;AACA,sBAAMC,kBAAgBjD,KAAK8C,OAAL,CAAaD,UAAb,EAAyB,QAAzB,CAAtB;AACA,sBAAMK,aAAalD,KAAK8C,OAAL,CAAaG,eAAb,EAA8B,WAA9B,CAAnB;AACA,sBAAME,eAAenD,KAAK8C,OAAL,CAAaI,UAAb,EAAyBT,QAAzB,CAArB;;AAEA;AACA,oBAAI,CAAC1C,GAAGqD,UAAH,CAAcH,eAAd,CAAL,EAAqC;AACjClD,uBAAGsD,SAAH,CAAaJ,eAAb;AACH;AACD,oBAAI,CAAClD,GAAGqD,UAAH,CAAcF,UAAd,CAAL,EAAgC;AAC5BnD,uBAAGsD,SAAH,CAAaH,UAAb;AACH;;AAED,oBAAI,CAACnD,GAAGqD,UAAH,CAAcD,YAAd,CAAL,EAAkC;AAC9BpD,uBAAGsD,SAAH,CAAaF,YAAb;AACH;;AAEDpD,mBAAGuD,UAAH,CAAcnB,QAAd,EAAwBnC,KAAK8C,OAAL,CAAaK,YAAb,EAA4B,GAAEZ,QAAS,EAAvC,CAAxB;;AAEA,oBAAIgB,WAAU,GAAER,MAAMC,SAAU,gCAA+BP,QAAS,IAAGF,QAAS,EAApF;;AAEA,oBAAGgB,QAAH,EAAY;AACX;AACApD,yBAAKqD,IAAL,CAAUD,QAAV,EAAoBE,IAApB,CAAyB,UAAUC,KAAV,EAAiB;AACzCA,8BAAMC,KAAN,CAAY,GAAZ,EAAgB,GAAhB,EAAyB;AAAzB,yBACCC,OADD,CACS,EADT,EACqB;AADrB,yBAECC,QAFD,GAGCC,KAHD,CAGQ,GAAEf,MAAMC,SAAU,gCAA+BP,QAAS,IAAGzC,KAAKuC,QAAL,CAAcJ,QAAd,CAAwB,UAASC,QAAQ,CAAR,CAAW,EAHjH,EADyC,CAI4E;AACrH,qBALD,EAKG2B,KALH,CAKS,UAAUC,GAAV,EAAe;AACvBC,gCAAQC,KAAR,CAAcF,GAAd;AACA,qBAPD;AAQA;;AAED,uBAAKG,IAAL,CAAU;AACNC,6BAAQ,IADF;AAENC,4BAAO,MAFD;AAGNxD,0BAAK;AACDyD,kCAAU,4BAA2B7B,QAAS,IAAGF,QAAS,EADzD;AAEDgC,wCAAgB,4BAA2B9B,QAAS,IAAGzC,KAAKuC,QAAL,CAAcJ,QAAd,CAAwB,UAASC,QAAQ,CAAR,CAAW,EAFlG;AAGDoC,+BAAOjC,QAHN;AAIDkC,kCAAUxC,KAAKI;AAJd;AAHC,iBAAV;AAWH,aAjDD,MAiDK;AACD,uBAAK8B,IAAL,CAAU;AACNC,6BAAQ,IADF;AAENC,4BAAO,MAFD;AAGNxD,0BAAK;AAHC,iBAAV;AAKH;AA1DkB;AA4DtB;AACD;;;AAGM6D,kBAAN,GAAsB;AAAA;;AAAA;AAClB,kBAAMC,QAAQ,OAAK3D,GAAL,CAAS2D,KAAvB;AACA,kBAAMC,QAAQ,OAAK5D,GAAL,CAAS4D,KAAT,EAAd;;AAEA,gBAAGD,KAAH,EAAS;AACL,oBAAIE,SAAOD,MAAMC,MAAjB;AACA,oBAAIL,QAAMI,MAAMJ,KAAhB;AACA,oBAAIM,aAAWF,MAAME,UAArB;AACA,oBAAIC,UAAQH,MAAMG,OAAlB;AACA,oBAAIT,WAASM,MAAMN,QAAnB;AACA,oBAAIC,iBAAeK,MAAML,cAAzB;AACA,oBAAIS,WAASJ,MAAMK,OAAnB;AACH,oBAAIC,MAAI,0FAAR;AACG,oBAAG,CAACV,KAAD,IAAUA,SAAO,EAApB,EAAuB;AACnB,2BAAKW,IAAL,CAAU,GAAV,EAAc,WAAd;AACA,2BAAO,KAAP;AACH;AACD,oBAAG,CAACJ,OAAD,IAAYA,WAAS,EAAxB,EAA2B;AACvB,2BAAKI,IAAL,CAAU,GAAV,EAAc,aAAd;AACA,2BAAO,KAAP;AACH;AACD,oBAAG,CAACD,IAAIE,IAAJ,CAASL,OAAT,CAAJ,EAAsB;AACrB,2BAAKI,IAAL,CAAU,GAAV,EAAc,eAAd;AACA,2BAAO,KAAP;AACA;AACD,oBAAG,CAACb,QAAD,IAAWA,YAAU,EAAxB,EAA2B;AACvB,2BAAKa,IAAL,CAAU,GAAV,EAAc,QAAd;AACA,2BAAO,KAAP;AACH;AACD,oBAAItE,OAAK;AACLwE,iCAAYb,KADP;AAELc,+BAAUhB,QAFL;AAGLiB,gCAAWT,UAHN;AAILU,mCAAcT,OAJT;AAKLU,iCAAYlB,cALP;AAMRS,8BAASA;AAND,iBAAT;;AAUA,oBAAGH,UAAQ,CAAX,EAAa;AAAC;AACV;AACA,wBAAIS,YAAU,MAAM,OAAK9E,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAW+C,MAAZ,EAAzB,EAA8Ca,KAA9C,CAAoD,WAApD,EAAiE3D,IAAjE,EAApB;AACA,wBAAGuC,YAAUgB,UAAUA,SAAvB,EAAiC;AAAE;AAC/B;AACA,4BAAIK,WAAS5C,MAAMC,SAAN,GAAgB,MAAhB,GAAuBsC,UAAUA,SAA9C,CAF6B,CAE6B;AAC1D,4BAAGvF,GAAGqD,UAAH,CAAcuC,QAAd,CAAH,EAA4B;AAAE;AAC1B5F,+BAAG6F,UAAH,CAAcD,QAAd;AACH;AACJ;;AAED;AACA,wBAAI/D,UAAQ,MAAM,OAAKpB,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAW+C,MAAZ,EAAzB,EAA8CgB,SAA9C,CAAwDhF,IAAxD,CAAlB;AACA,wBAAIiF,UAAQ,MAAM,OAAKtF,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAW,GAAZ,EAAzB,EAA2C4D,KAA3C,CAAiD,UAAjD,EAA6DK,KAA7D,EAAlB,CAbS,CAa+E;AAC3F,wBAAGD,WAAS,CAAZ,EAAc;AACb,+BAAKX,IAAL,CAAU,GAAV,EAAc,2BAAd;AACA,+BAAO,KAAP;AACA;;AAEE,wBAAG,CAACvD,OAAJ,EAAY;AACR,+BAAKuD,IAAL,CAAU,GAAV,EAAc,QAAd;AACH,qBAFD,MAGI;AACA,+BAAKf,OAAL,CAAa,EAACvD,MAAKe,OAAN,EAAb,EAA4B,QAA5B;AACH;AACJ,iBAzBD,MAyBK;AAAC;AACF,wBAAIA,UAAQ,MAAM,OAAKpB,aAAL,CAAmBwF,QAAnB,CAA4BnF,IAA5B,CAAlB;AACH,wBAAIiF,UAAQ,MAAM,OAAKtF,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAW,GAAZ,EAAzB,EAA2C4D,KAA3C,CAAiD,UAAjD,EAA6DK,KAA7D,EAAlB,CAFI,CAEoF;AACxF,wBAAGD,WAAS,CAAZ,EAAc;AACb,+BAAKX,IAAL,CAAU,GAAV,EAAc,2BAAd;AACA,+BAAO,KAAP;AACA;AACE,wBAAG,CAACvD,OAAJ,EAAY;AACR,+BAAKuD,IAAL,CAAU,GAAV,EAAc,SAAd;AACH,qBAFD,MAGI;AACA,+BAAKf,OAAL,CAAa,EAACvD,MAAKe,OAAN,EAAb,EAA4B,SAA5B;AACH;AACJ;AAGJ,aA5ED,MA4EK;AACD,uBAAKuD,IAAL,CAAU,GAAV,EAAc,UAAd;AACH;AAlFiB;AAmFrB;AACD;;;AAGMc,gBAAN,GAAoB;AAAA;;AAAA;AAChB,gBAAG,OAAKtB,KAAR,EAAc;AACV,oBAAI/C,UAAQ,OAAKZ,GAAL,CAAS4D,KAAT,CAAe,UAAf,CAAZ;AACA,oBAAIU,YAAU,MAAM,OAAK9E,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAWF,OAAZ,EAAzB,EAA+C8D,KAA/C,CAAqD,uBAArD,EAA8E3D,IAA9E,EAApB;;AAEA;AACH,oBAAGuD,SAAH,EAAa;AACZ,yBAAK,IAAIY,CAAT,IAAcZ,SAAd,EAAyB;AACxB,4BAAIA,UAAUa,cAAV,CAAyBD,CAAzB,MAAgC,IAApC,EAA0C;AACzC;AACA,gCAAIP,WAAS5C,MAAMC,SAAN,GAAgB,MAAhB,GAAuBsC,UAAUY,CAAV,CAApC,CAFyC,CAEU;AACnD,gCAAGnG,GAAGqD,UAAH,CAAcuC,QAAd,CAAH,EAA4B;AAAE;AAC7B5F,mCAAG6F,UAAH,CAAcD,QAAd;AACA;AACD;AACD;AACD;;AAEE,oBAAIS,SAAO,MAAM,OAAK5F,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAWF,OAAZ,EAAzB,EAA+CyE,MAA/C,EAAjB;AACA,oBAAG,CAACD,MAAJ,EAAW;AACP,2BAAKjB,IAAL,CAAU,GAAV,EAAc,SAAd;AACH,iBAFD,MAGI;AACA,2BAAKf,OAAL,CAAa,EAACvD,MAAKuF,MAAN,EAAb,EAA2B,SAA3B;AACH;AACJ;AAzBe;AA0BnB;AACD;;;AAGME,kBAAN,GAAsB;AAAA;;AAAA;AACrB,gBAAIC,KAAG,OAAK3F,GAAL,CAAS,UAAT,CAAP;AACA,gBAAIoE,WAAS,OAAKpE,GAAL,CAAS,UAAT,CAAb;AACA,gBAAGoE,YAAU,GAAb,EAAiB;AAChB,oBAAIc,UAAQ,MAAM,OAAKtF,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAW,GAAZ,EAAzB,EAA2C4D,KAA3C,CAAiD,UAAjD,EAA6DK,KAA7D,EAAlB,CADgB,CACwE;AACxF,oBAAGD,WAAS,CAAZ,EAAc;AACb,2BAAKX,IAAL,CAAU,GAAV,EAAc,2BAAd;AACA,2BAAO,KAAP;AACA;AACD;AACD,gBAAIqB,aAAW,MAAM,OAAKhG,aAAL,CAAmBsB,KAAnB,CAAyB,EAAC,YAAWyE,EAAZ,EAAzB,EAA0CE,MAA1C,CAAiD,EAAC,YAAWzB,QAAZ,EAAjD,CAArB;AACA,gBAAG,CAACwB,UAAJ,EAAe;AACd,uBAAKrB,IAAL,CAAU,GAAV,EAAc,WAAd;AACA,aAFD,MAGI;AACH,uBAAKf,OAAL,CAAa,EAACvD,MAAK2F,UAAN,EAAb,EAA+B,WAA/B;AACA;AAhBoB;AAiBrB;;AAhP+B,CAApC",
    "file": "..\\..\\..\\src\\admin\\controller\\slideshow.js",
    "sourcesContent": [
        "const pagination = require('think-pagination');\nconst fs = require('fs');\nconst path = require('path');\nconst helper = require('think-helper');\nconst Base = require('./base.js');\nconst Jimp = require(\"jimp\");\nmodule.exports = class extends Base {\n    /*\n     * 构造函数 便于使用model文件\n     * */\n    constructor(...args) {\n        super(...args);//调用父级的 constructor 方法\n        this.modelInstance = this.model('slideshow'); //增加一个方法\n    }\n  /*图片列表*/\n  async indexAction() {\n      //分页查询列表\n      let pageIndex=this.get('page');\n      const data = await this.modelInstance.slideList(pageIndex);   ////  两个表的字段重复了\n      const page_data = pagination(data, this.ctx, {\n          desc: false, //show description\n          pageNum: 2,\n          url: '', //page url, when not set, it will auto generated\n          class: '', //pagenation extra class\n          text: {\n              next: '下一页',\n              prev: '上一页',\n              total: 'count: __COUNT__ , pages: __PAGE__'\n          }\n      });\n      this.assign({'pagination':page_data,'slide_list':data.data});\n      return this.display();\n  }\n  /*\n  * 增加图片\n  * */\n    async addAction(){\n        let slideId=this.get('slide-id');\n        if(slideId){//有文章id 则是编辑页面 从news表根据id查询数据\n            let slideData=await this.modelInstance.where({'slide_id':slideId}).find();\n            this.assign('slideData',slideData);\n        }\n\n        return this.display();\n    }\n    /*\n    * 单图异步上传\n    * */\n    async uploadImgAction(){\n        let file=this.ctx.file('file');//获取文件\n\n        if(file && file.type === 'image/png' || file.type === 'image/jpeg') {\n            const filepath = file.path;\n            const nameArr = file.name.split('.');\n            const basename = path.basename(filepath) + '.' + nameArr[nameArr.length - 1];\n            const YYYYMMDD = helper.datetime(Date.now(), 'YYYYMMDD');\n            const staticPath = path.resolve(think.ROOT_PATH, 'www/static');\n            const uploadSlidePath=path.resolve(staticPath, 'upload');\n            const uploadPath = path.resolve(uploadSlidePath, 'slideshow');\n            const relativePath = path.resolve(uploadPath, YYYYMMDD);\n\n            // 文件夹不存在则创建\n            if (!fs.existsSync(uploadSlidePath)) {\n                fs.mkdirSync(uploadSlidePath);\n            }\n            if (!fs.existsSync(uploadPath)) {\n                fs.mkdirSync(uploadPath);\n            }\n\n            if (!fs.existsSync(relativePath)) {\n                fs.mkdirSync(relativePath);\n            }\n\n            fs.renameSync(filepath, path.resolve(relativePath, `${basename}`));\n\n            let datuPath=`${think.ROOT_PATH}/www/static/upload/slideshow/${YYYYMMDD}/${basename}`;\n\n            if(datuPath){\n\t            //处理缩略图\n\t            Jimp.read(datuPath).then(function (lenna) {\n\t\t            lenna.cover(320,320)     // resize\n\t\t            .quality(60)         // set JPEG quality\n\t\t            .autocrop()\n\t\t            .write(`${think.ROOT_PATH}/www/static/upload/slideshow/${YYYYMMDD}/${path.basename(filepath)}_thumb.${nameArr[1]}`); // save\n\t            }).catch(function (err) {\n\t\t            console.error(err);\n\t            });\n            }\n\n            this.json({\n                success:true,\n                errmsg:'上传成功',\n                data:{\n                    img_path:`/static/upload/slideshow/${YYYYMMDD}/${basename}`,\n                    img_path_thumb:`/static/upload/slideshow/${YYYYMMDD}/${path.basename(filepath)}_thumb.${nameArr[1]}`,\n                    title: basename,\n                    original: file.name\n                }\n            });\n\n        }else{\n            this.json({\n                success:true,\n                errmsg:'上传失败',\n                data:[]\n            });\n        }\n\n    }\n    /*\n    * 文字和图片路径提交 存储\n    * */\n    async addslideAction(){\n        const isGet = this.ctx.isGet;\n        const param = this.ctx.param();\n\n        if(isGet){\n            let editId=param.editId;\n            let title=param.title;\n            let descrition=param.descrition;\n            let jumpUrl=param.jumpUrl;\n            let img_path=param.img_path;\n            let img_path_thumb=param.img_path_thumb;\n            let is_slide=param.isslide;\n\t        var reg=/^([hH][tT]{2}[pP]:\\/\\/|[hH][tT]{2}[pP][sS]:\\/\\/)(([A-Za-z0-9-~]+)\\.)+([A-Za-z0-9-~\\/])+$/;\n            if(!title || title==''){\n                this.fail(403,'轮播图标题不能为空');\n                return false;\n            }\n            if(!jumpUrl || jumpUrl==''){\n                this.fail(403,'轮播图跳转链接不能为空');\n                return false;\n            }\n            if(!reg.test(jumpUrl)){\n\t            this.fail(403,'请输入正确的轮播图跳转链接');\n\t            return false;\n            }\n            if(!img_path||img_path==''){\n                this.fail(403,'请先上传图片');\n                return false;\n            }\n            let data={\n                slide_title:title,\n                slide_img:img_path,\n                slide_text:descrition,\n                slide_jumpurl:jumpUrl,\n                slide_thumb:img_path_thumb,\n\t            is_slide:is_slide\n            };\n\n\n            if(editId!=0){//编辑\n                //首先先把本地已经上传的图片删掉 然后再更新数据库数据\n                let slide_img=await this.modelInstance.where({'slide_id':editId}).field('slide_img').find();\n                if(img_path!=slide_img.slide_img){ //如果提交过来的图片路径和数据库的不一致，则是修改了图片\n                    // 检测文件是否存在\n                    let filePath=think.ROOT_PATH+'/www'+slide_img.slide_img;  //图片的路径\n                    if(fs.existsSync(filePath)) { //如果存在则删除图片\n                        fs.unlinkSync(filePath);\n                    }\n                }\n\n                //更新数据\n                let slideId=await this.modelInstance.where({'slide_id':editId}).editSlide(data);\n                let isSlide=await this.modelInstance.where({'is_slide':'1'}).field('is_slide').count(); //设置为轮播图的数量 最多只能设置5\n\t            if(isSlide>=5){\n\t\t            this.fail(403,'轮播图最多只能设置5个，请先取消其他已设置的轮播图');\n\t\t            return false\n\t            }\n\n                if(!slideId){\n                    this.fail(403,'编辑文章失败');\n                }\n                else{\n                    this.success({data:slideId},'编辑文章成功');\n                }\n            }else{//新增\n                let slideId=await this.modelInstance.addSlide(data);\n\t            let isSlide=await this.modelInstance.where({'is_slide':'1'}).field('is_slide').count(); //设置为轮播图的数量 最多只能设置5\n\t            if(isSlide>=5){\n\t\t            this.fail(403,'轮播图最多只能设置5个，请先取消其他已设置的轮播图');\n\t\t            return false\n\t            }\n                if(!slideId){\n                    this.fail(403,'添加轮播图失败');\n                }\n                else{\n                    this.success({data:slideId},'添加轮播图成功');\n                }\n            }\n\n\n        }else{\n            this.fail(403,'请使用get方法');\n        }\n    }\n    /*\n    * 删除图片记录 @同时需要删除对应的已经上传的图片\n    * */\n    async deleteAction(){\n        if(this.isGet){\n            let slideId=this.ctx.param('slide-id');\n            let slide_img=await this.modelInstance.where({'slide_id':slideId}).field('slide_img,slide_thumb').find();\n\n            //循环遍历对象\n\t        if(slide_img){\n\t\t        for (let i in slide_img) {\n\t\t\t        if (slide_img.hasOwnProperty(i) === true) {\n\t\t\t\t        // 检测文件是否存在 删除大图和缩略图\n\t\t\t\t        let filePath=think.ROOT_PATH+'/www'+slide_img[i];  //图片的路径\n\t\t\t\t        if(fs.existsSync(filePath)) { //如果存在则删除图片\n\t\t\t\t\t        fs.unlinkSync(filePath);\n\t\t\t\t        }\n\t\t\t        }\n\t\t        }\n\t        }\n\n            let dataId=await this.modelInstance.where({'slide_id':slideId}).delete();\n            if(!dataId){\n                this.fail(403,'删除轮播图失败');\n            }\n            else{\n                this.success({data:dataId},'删除轮播图成功');\n            }\n        }\n    }\n    /*\n    * 设置为轮播图\n    * */\n    async setslideAction(){\n    \tlet id=this.get('slide-id');\n    \tlet is_slide=this.get('is_slide');\n    \tif(is_slide=='1'){\n\t\t    let isSlide=await this.modelInstance.where({'is_slide':'1'}).field('is_slide').count(); //设置为轮播图的数量 最多只能设置5\n\t\t    if(isSlide>=5){\n\t\t\t    this.fail(403,'轮播图最多只能设置5个，请先取消其他已设置的轮播图');\n\t\t\t    return false;\n\t\t    }\n\t    }\n    \tlet thisRecord=await this.modelInstance.where({'slide_id':id}).update({'is_slide':is_slide});\n\t    if(!thisRecord){\n\t\t    this.fail(403,'更改轮播图状态失败');\n\t    }\n\t    else{\n\t\t    this.success({data:thisRecord},'更改轮播图状态成功');\n\t    }\n    }\n\n};\n"
    ]
}