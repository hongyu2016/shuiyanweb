{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\base.js"
    ],
    "names": [
        "module",
        "exports",
        "think",
        "Controller",
        "__before",
        "header"
    ],
    "mappings": "AAAAA,OAAOC,OAAP,GAAiB,cAAcC,MAAMC,UAApB,CAA+B;AAC5CC,eAAW;AACP;AACA,aAAKC,MAAL,CAAY,6BAAZ,EAA2C,KAAKA,MAAL,CAAY,QAAZ,CAA3C,EAFO,CAE6D;AACpE,aAAKA,MAAL,CAAY,8BAAZ,EAA4C,kBAA5C;AACA,aAAKA,MAAL,CAAY,8BAAZ,EAA4C,6BAA5C;AACA;AACA,aAAKA,MAAL,CAAY,kCAAZ,EAA+C,IAA/C;AAEH;AACD;;;;;;;;;;;;;;;;;AAV4C,CAAhD",
    "file": "..\\..\\..\\src\\api\\controller\\base.js",
    "sourcesContent": [
        "module.exports = class extends think.Controller {\n    __before() {\n        //对应客户端的 xhrFields.withCredentials: true 参数，服务器端通过在响应 header 中设置 Access-Control-Allow-Credentials = true 来运行客户端携带证书式访问。通过对 Credentials 参数的设置，就可以保持跨域 Ajax 时的 Cookie。这里需要注意的是：//服务器端 Access-Control-Allow-Credentials = true时，参数Access-Control-Allow-Origin 的值不能为 '*' 。\n        this.header(\"Access-Control-Allow-Origin\", this.header(\"origin\"));  // || \"*\" this.header(\"origin\")\n        this.header(\"Access-Control-Allow-Headers\", \"x-requested-with\");\n        this.header(\"Access-Control-Allow-Methods\", \"GET,POST,OPTIONS,PUT,DELETE\");\n        //this.header('Content-Type', '*');\n        this.header('Access-Control-Allow-Credentials',true);\n\n    }\n    /*__call(){\n        //跨域设置\n        let method = this.http.method.toLowerCase();\n        if(method === \"options\"){\n            this.setCorsHeader();\n            this.end();\n            return;\n        }\n        this.setCorsHeader();\n        return super.__call();\n    }\n    setCorsHeader(){\n        this.header(\"Access-Control-Allow-Origin\", this.header(\"origin\") || \"*\");\n        this.header(\"Access-Control-Allow-Headers\", \"x-requested-with\");\n        this.header(\"Access-Control-Request-Method\", \"GET,POST,PUT,DELETE\");\n        this.header(\"Access-Control-Allow-Credentials\", \"true\");\n    }*/\n};\n"
    ]
}